// This file was generated by cmd
package optional

import "encoding/json"

// Uint represents an uint that may be optional
type Uint struct {
	value *uint
}

// NewUint creates an optional.Uint
func NewUint(val uint) Uint {
	return Uint{
		value: &val,
	}
}

// SetValue sets the uint value
func (opt *Uint) SetValue(val uint) {
	opt.value = &val
}

func (opt Uint) initValue() uint {
	var val uint
	return val
}

// Value returns the uint value or init value if not present
func (opt Uint) Value() uint {
	if opt.value != nil {
		return *opt.value
	} else {
		return opt.initValue()
	}
}

// IsPresent returns whether or not the value is present
func (opt Uint) IsPresent() bool {
	return opt.value != nil
}

// MarshalJSON implements the json.MarshalJSON interface
func (opt Uint) MarshalJSON() ([]byte, error) {
	if opt.value != nil {
		return json.Marshal(opt.value)
	}
	return json.Marshal(nil)
}

// UnmarshalJSON implements the json.UnmarshalJSON interface
func (opt *Uint) UnmarshalJSON(data []byte) error {
	opt.value = nil

	if data == nil {
		return nil
	}

	if string(data) == "null" {
		return nil
	}

	var val uint
	if err := json.Unmarshal(data, &val); err != nil {
		return err
	}

	opt.value = &val
	return nil
}
