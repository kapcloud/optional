// This file was generated by cmd
package optional

import "encoding/json"

// Uint16 represents an uint16 that may be optional
type Uint16 struct {
	value *uint16
}

// NewUint16 creates an optional.Uint16
func NewUint16(val uint16) Uint16 {
	return Uint16{
		value: &val,
	}
}

// SetValue sets the uint16 value
func (opt *Uint16) SetValue(val uint16) {
	opt.value = &val
}

func (opt Uint16) initValue() uint16 {
	var val uint16
	return val
}

// Value returns the uint16 value or init value if not present
func (opt Uint16) Value() uint16 {
	if opt.value != nil {
		return *opt.value
	} else {
		return opt.initValue()
	}
}

// IsPresent returns whether or not the value is present
func (opt Uint16) IsPresent() bool {
	return opt.value != nil
}

// MarshalJSON implements the json.MarshalJSON interface
func (opt Uint16) MarshalJSON() ([]byte, error) {
	if opt.value != nil {
		return json.Marshal(opt.value)
	}
	return json.Marshal(nil)
}

// UnmarshalJSON implements the json.UnmarshalJSON interface
func (opt *Uint16) UnmarshalJSON(data []byte) error {
	opt.value = nil

	if data == nil {
		return nil
	}

	if string(data) == "null" {
		return nil
	}

	var val uint16
	if err := json.Unmarshal(data, &val); err != nil {
		return err
	}

	opt.value = &val
	return nil
}
