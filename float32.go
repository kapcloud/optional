// This file was generated by cmd
package optional

import "encoding/json"

// Float32 represents an float32 that may be optional
type Float32 struct {
	value *float32
}

// NewFloat32 creates an optional.Float32
func NewFloat32(val float32) Float32 {
	return Float32{
		value: &val,
	}
}

// SetValue sets the float32 value
func (opt *Float32) SetValue(val float32) {
	opt.value = &val
}

func (opt Float32) initValue() float32 {
	var val float32
	return val
}

// Value returns the float32 value or init value if not present
func (opt Float32) Value() float32 {
	if opt.value != nil {
		return *opt.value
	} else {
		return opt.initValue()
	}
}

// IsPresent returns whether or not the value is present
func (opt Float32) IsPresent() bool {
	return opt.value != nil
}

// MarshalJSON implements the json.MarshalJSON interface
func (opt Float32) MarshalJSON() ([]byte, error) {
	if opt.value != nil {
		return json.Marshal(opt.value)
	}
	return json.Marshal(nil)
}

// UnmarshalJSON implements the json.UnmarshalJSON interface
func (opt *Float32) UnmarshalJSON(data []byte) error {
	opt.value = nil

	if data == nil {
		return nil
	}

	if string(data) == "null" {
		return nil
	}

	var val float32
	if err := json.Unmarshal(data, &val); err != nil {
		return err
	}

	opt.value = &val
	return nil
}
